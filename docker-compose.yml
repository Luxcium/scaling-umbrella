version: '3.8'

services:
  dev:
    build:
      context: .
      dockerfile: .devcontainer/Dockerfile
    volumes:
      - .:/workspace:cached
      - node_modules:/workspace/node_modules
      - projects:/workspace/projects
      - ~/.gitconfig:/home/node/.gitconfig:cached

    # Keep the container running
    command: sleep infinity

    environment:
      - NODE_ENV=development
      - TYPESCRIPT_VERSION=~5.7.0
      - TEMPLATE_REPO=https://github.com/Luxcium/cline-ai-template.git
      # Increase Node's memory limit
      - NODE_OPTIONS=--max-old-space-size=4096
      # Enable TypeScript incremental builds
      - TSC_COMPILE_ON_ERROR=true

    # Resource constraints
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G

    # Health check
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    # Restart policy
    restart: unless-stopped

    # Support for debugging
    cap_add:
      - SYS_PTRACE
    security_opt:
      - seccomp:unconfined

    # Network settings
    dns:
      - 8.8.8.8
      - 8.8.4.4

    # Shared memory size for better performance
    shm_size: '2gb'

    # Logging configuration
    logging:
      driver: 'json-file'
      options:
        max-size: '50m'
        max-file: '3'

  # Production application container
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: scaling_umbrella_app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://user:password@postgres:5432/mydb
      - REDIS_URL=redis://redis:6379
    ports:
      - '3000:3000'
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - app-network

  # Added PostgreSQL database service
  postgres:
    image: postgres:15
    container_name: prisma_postgres
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydb
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U user -d mydb']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # Added Redis service
  redis:
    image: redis:alpine
    container_name: redis_queue
    restart: always
    ports:
      - '6379:6379'
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

volumes:
  node_modules:
    driver: local
    driver_opts:
      type: none
      device: /workspace/node_modules
      o: bind
  projects:
    driver: local
    name: template-projects
    driver_opts:
      type: none
      device: /workspace/projects
      o: bind
  postgres_data:
    driver: local

# Define a custom network for service communication
networks:
  app-network:
    driver: bridge
